#!/bin/bash
current_dir=$(pwd)
script_dir=$(cd $(dirname $0); pwd)
gn_file=$current_dir/.gn
if [ -f "$gn_file" ]; then
    echo "$gn_file exist!"
    exit 1
fi
echo "# Copyright by zhaosonggo Authors. All rights reserved.
buildconfig = \"//build/BUILDCONFIG.gn\"" >> $gn_file


# This script generates a template args.gn file for a new project.
# This file is intended to be the central place for a project to define
# its own build arguments and global configurations, which will then be
# consumed by the base GN build system.

# --- Configuration ---
readonly TARGET_FILENAME="args.gni"

# --- Main Logic ---

# Check if the file already exists to avoid overwriting user modifications.
if [ -f "$TARGET_FILENAME" ]; then
    echo "File '$TARGET_FILENAME' already exists. Skipping generation."
    exit 0
fi

echo "Generating template file: '$TARGET_FILENAME'..."

# Use a 'here document' (cat <<EOF) to write the multi-line template.
# This is a clean and readable way to embed text blocks in a shell script.
cat > "$TARGET_FILENAME" <<EOF
# Copyright by zhaosonggo Authors. All rights reserved.
# This file was automatically generated by a script on $(date).
#
# In this file, you should define project-specific build arguments and
# provide project-level overrides for global build configurations.

# ==============================================================================
# Project-Specific Build Arguments
# ==============================================================================
# Use declare_args() to define build flags or variables that are unique to
# this project. These can be overridden by the end-user in their build
# output directory (e.g., out/default/args.gn).
#
# Example:
#   enable_feature_x = false
#   project_api_key = "default_key"
#
declare_args() {
    # ==> Please add your project-specific GN arguments here.

}


# ==============================================================================
# Project-Level Global Build Configurations
# ==============================================================================
# These variables are used to inject configurations into all targets within
# this project. They are read by the main BUILDCONFIG.gn from the base build
# repository.

# A list of global include directories for this project.
# Paths should be absolute from the source root, starting with "//".
# Example: self_include_dirs = [ "//src/public", "//third_party/utils/include" ]
self_include_dirs = []

# A list of C/C++ compiler flags to be applied to all targets in the project.
# These flags are appended to the base flags provided by the toolchain.
# Example: self_cflags_cc = [ "-Wno-unused-function" ]
self_cflags_cc = []
EOF

# Provide clear feedback to the user upon successful completion.
echo "Successfully created '$TARGET_FILENAME'."
echo "Please edit it to define your project's build configurations."
